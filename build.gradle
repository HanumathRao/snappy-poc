plugins {
  id 'java'
  id 'com.github.johnrengelman.shadow' version '1.2.3'
  id 'com.commercehub.gradle.plugin.avro' version "0.5.0"
}

archivesBaseName = 'AdImpressionLogAggr'

allprojects {

  version = '2.0-SNAPSHOT'

  repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/groups/public" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "http://repository.snappydata.io:8089/repository/internal" }
    maven { url "http://repository.snappydata.io:8089/repository/snapshots" }
    maven { url 'https://clojars.org/repo' }
  }

  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'scala'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: "com.commercehub.gradle.plugin.avro"

  configurations {
    provided {
      description 'a dependency that is provided externally at runtime'
      visible true
    }
  }

  idea {
    module {
      scopes.PROVIDED.plus += [ configurations.provided ]
    }
  }
  eclipse {
    classpath {
      plusConfigurations += [ configurations.provided ]
    }
  }

  sourceSets {
    main.compileClasspath += configurations.provided
    main.runtimeClasspath -= configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
  }

  javadoc.classpath += configurations.provided

  ext {
    sparkVersion = '1.6.1'
  }

  dependencies {
    compile 'org.scala-lang:scala-library:2.10.6'
    compile 'org.scala-lang:scala-reflect:2.10.6'
    compile 'org.scala-lang:scala-compiler:2.10.6'
  }
}

dependencies {
  provided 'io.snappydata:snappy-core_2.10:0.2-SNAPSHOT'
  provided 'io.snappydata:snappy-cluster_2.10:0.2-SNAPSHOT'
  provided "io.snappydata:snappy-spark-core_2.10:${sparkVersion}"
  provided "io.snappydata:snappy-spark-catalyst_2.10:${sparkVersion}"
  provided "io.snappydata:snappy-spark-sql_2.10:${sparkVersion}"
  provided "io.snappydata:snappy-spark-streaming_2.10:${sparkVersion}"
  // provided 'io.snappydata:snappy-aqp:0.2-SNAPSHOT'
  compile 'com.miguno:kafka-avro-codec_2.10:0.1.1-SNAPSHOT'
  compile 'org.apache.kafka:kafka_2.10:0.8.2.1'
  compile 'com.twitter:algebird-core_2.10:0.1.11'
  compile 'com.googlecode.javaewah:JavaEWAH:1.1.5'
  compile 'org.joda:joda-convert:1.2'
}

task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
  source("src/avro")
  outputDir = file("src/main/java")
}

compileJava.source(generateAvro.outputs)

avro.stringType = "charSequence"

task generateAdImpressions(type: JavaExec, dependsOn: classes) {
  main = 'io.snappydata.adanalytics.aggregator.KafkaAdImpressionGenerator'
  classpath sourceSets.test.runtimeClasspath
}

task aggeregateAdImpressions_API(type: JavaExec, dependsOn: classes) {
  main = 'io.snappydata.adanalytics.aggregator.SnappyAPILogAggregator'
  classpath sourceSets.test.runtimeClasspath
  jvmArgs = ['-XX:MaxPermSize=512m']
}

task aggeregateAdImpressions_SQL(type: JavaExec, dependsOn: classes) {
  main = 'io.snappydata.adanalytics.aggregator.SnappySQLLogAggregator'
  classpath sourceSets.test.runtimeClasspath
  jvmArgs = ['-XX:MaxPermSize=512m']
}

task startSnappyIngestionPerf_Kafka(type: JavaExec, dependsOn: classes) {
  main = 'io.snappydata.adanalytics.benchmark.KafkaSnappyIngestionPerf'
  classpath sourceSets.test.runtimeClasspath
  jvmArgs = ['-XX:MaxPermSize=512m']
  maxHeapSize = "8196m"
}

task startSnappyIngestionPerf_Socket(type: JavaExec, dependsOn: classes) {
  main = 'io.snappydata.adanalytics.benchmark.SocketSnappyIngestionPerf'
  classpath sourceSets.test.runtimeClasspath
  jvmArgs = ['-XX:MaxPermSize=512m']
  maxHeapSize = "8196m"
}

task product(type: Exec) {
  dependsOn ':assembly:shadowJar'

  def productDir = "${rootProject.buildDir}/snappydata-poc"
  def snappyData = System.env.SNAPPYDATA
  if (snappyData == null || snappyData.length == 0) {
    snappyData = "${projectDir}/../snappydata"
  }

  doFirst {
    delete productDir
    file("${productDir}/lib").mkdirs()
  }

  // first execute the snappydata "product" target based on env var SNAPPYDATA
  workingDir snappyData
  commandLine './gradlew', 'copyProduct', "-PcopyToDir=${productDir}"

  // lastly copy own assembly fat jar in product lib dir
  doLast {
    copy {
      from project(':assembly').shadowJar.outputs
      into "${productDir}/lib"
    }
  }
}
